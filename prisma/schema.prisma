// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String   @unique
  bio       String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  tweets Tweet[]
  likes  Like[]
  replies Reply[]
}

model Tweet {
  id         Int      @id @default(autoincrement())
  tweet      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  userId Int
  user   User  @relation(fields: [userId], references: [id])
  
  likes Like[] @relation("TweetLikes")
  replies Reply[] @relation("TweetReplies")
}

model Like {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  
  userId Int
  user   User  @relation(fields: [userId], references: [id])
  
  tweetId Int
  tweet   Tweet @relation("TweetLikes", fields: [tweetId], references: [id], onDelete: Cascade)
}

model Reply {
  id         Int      @id @default(autoincrement())
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  userId Int
  user   User  @relation(fields: [userId], references: [id])
  
  tweetId Int
  tweet   Tweet @relation("TweetReplies", fields: [tweetId], references: [id], onDelete: Cascade)
}
